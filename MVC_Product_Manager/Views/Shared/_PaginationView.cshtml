@model MVC_Product_Manager.Models.Pagination
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor _httpContextAccessor
@{
    string search = _httpContextAccessor.HttpContext.Request.Query["search"].ToString();
    string pageSizeA = _httpContextAccessor.HttpContext.Request.Query["pageSizeA"].ToString();
}
<div class="container">
    @{
        if (Model.TotalPages > 0)
        {
            <ul class="pagination justify-content-center">
                @{
                    if (Model.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-route-pg="1" asp-route-search="@search" asp-route-pageSizeA="@pageSizeA">Erste Seite</a>
                        </li>
                        <li>
                            <a class="page-link" asp-route-pg="@(Model.CurrentPage - 1)" asp-route-search="@search" asp-route-pageSizeA="@pageSizeA">Vorherige</a>
                        </li>
                    }
                }
                @for (var pge = Model.StartPage; pge <= Model.EndPage; pge++)
                {
                    <li class="page-item" @(pge == Model.CurrentPage ? "active" : "")>
                        <a class="page-link" asp-route-pg="@pge" asp-route-search="@search" asp-route-pageSizeA="@pageSizeA">@pge</a>
                    </li>
                }
                @{
                    if (Model.CurrentPage < Model.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-route-pg="@(Model.CurrentPage +1)" asp-route-search="@search" asp-route-pageSizeA="@pageSizeA">Nächste</a>
                        </li>
                        <li>
                            <a class="page-link" asp-route-pg="@(Model.TotalPages)" asp-route-search="@search" asp-route-pageSizeA="@pageSizeA">Letzte</a>
                        </li>
                    }
                }
            </ul>
        }
    }
</div>